{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        ///////// 配置 [1]：这是我用来带参调试当前 .py 的配置
        {
            "name": "Python Debugger: Current File with Arguments",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "args": [
                "${command:pickArgs}"
            ]
        },
        ///////// 配置 [2]：这是我用 pytest 带参调试的配置
        {
            "name": "Python: pytest",
            "type": "debugpy",
            "request": "launch",
            /// 由于我的 pytest 在虚拟环境中，所以这里指定了虚拟环境中的解释器和 pytest
            "python": "/mnt/home/douliyang/mlsys/minitorch/.venv/bin/python", 
            "program": "/mnt/home/douliyang/mlsys/minitorch/.venv/bin/pytest",
            "args": [
                "--capture=no",
                "-m", // 指定 pytest 的 marker
                "${command:pickArgs}", // 这里是我在调试时输入的参数， 比如 pytest -m test_01, 这里用于接受 test_01
                "--capture=no", // 不捕获输出
                "--no-header", // 不显示 pytest 的 header
                "--disable-warnings" // 禁用 pytest 的 warning
            ],
            "console": "integratedTerminal"
        },
        ///////// 配置 [3]：更加细粒度的pytest测试
        {
            "name": "Python: pytest fine grained",
            "type": "debugpy",
            "request": "launch",
            /// 由于我的 pytest 在虚拟环境中，所以这里指定了虚拟环境中的解释器和 pytest
            "python": "/mnt/home/douliyang/mlsys/minitorch/task1/bin/python", 
            "program": "/mnt/home/douliyang/mlsys/minitorch/task1/bin/pytest",
            "args": [
                "--capture=no",
                "/home/douliyang/large/mlsys/minitorch/minitorch-module-2-micropuma/tests/test_tensor.py",
                "-k", // 指定 pytest 的 marker
                "${command:pickArgs}", // 这里是我在调试时输入的参数， 比如 pytest -m test_01, 这里用于接受 test_01
                "--capture=no", // 不捕获输出
                "--no-header", // 不显示 pytest 的 header
                "--disable-warnings" // 禁用 pytest 的 warning
            ],
            "console": "integratedTerminal"
        }
    ]
}
